/**********************************************************************************************/
/*                                                                                            */
/*                           Заглавный файл драйвера дисплея.                                 */
/*                                                                                            */
/**********************************************************************************************/
#ifndef DISPLAY_H
#define DISPLAY_H
#define OUT
#define IN

/*--------------------------------------------------------------------------------------------*/
/* Линия E ЖКИ (строб)                                                                 */
/*--------------------------------------------------------------------------------------------*/
// Активный уровень - высокий.
#define   LCD_E               4
#define   LCD_E_PIN           &PORTB, LCD_E

/*--------------------------------------------------------------------------------------------*/
/* Линия A0 ЖКИ (данные/команда)                                                       */
/*--------------------------------------------------------------------------------------------*/
// "1" - цикл передачи данных, "0" - цикл передачи команды.
#define   LCD_A0              4
#define   LCD_A0_PIN          &PORTC, LCD_A0

/*--------------------------------------------------------------------------------------------*/
/* Линия RW ЖКИ (запись/чтение)                                                       */
/*--------------------------------------------------------------------------------------------*/
// "1" - цикл чтения, "0" - цикл записи.
#define   LCD_RW              3
#define   LCD_RW_PIN          &PORTC, LCD_RW

/*--------------------------------------------------------------------------------------------*/
/* Линия CS2 ЖКИ (выборка 2)                                                           */
/*--------------------------------------------------------------------------------------------*/
// Активный уровень - низкий.
#define   LCD_CS2             1 
#define   LCD_CS2_PIN         &PORTC, LCD_CS2

/*--------------------------------------------------------------------------------------------*/
/* Линия CS1 ЖКИ (выборка 1)                                                            */
/*--------------------------------------------------------------------------------------------*/
// Активный уровень - низкий.
#define   LCD_CS1             0
#define   LCD_CS1_PIN         &PORTC, LCD_CS1

/*--------------------------------------------------------------------------------------------*/
/* Линия RES ЖКИ (сброс)                                                               */
/*--------------------------------------------------------------------------------------------*/
// Активный уровень - низкий.
#define   LCD_RES             2
#define   LCD_RES_PIN         &PORTC, LCD_RES




inline void Set_Line_in_Port(unsigned char volatile* port,unsigned char bit) {*port|=( 1 << bit );}
inline void  Clr_Line_in_Port(unsigned char volatile* port,unsigned char bit) {*port&=~( 1 << bit );}
inline bool  is_Output_Line_in_Port_Set(unsigned char volatile* port,unsigned char bit) { return (*port&( 0x01 << bit ))?(true):(false);}

inline void Set_crystal(BYTE c) 
{
  
  if (c)
    {
      Clr_Line_in_Port(LCD_CS1_PIN);
      Set_Line_in_Port(LCD_CS2_PIN);
    }
  else
  {
    Clr_Line_in_Port(LCD_CS2_PIN);
    Set_Line_in_Port(LCD_CS1_PIN);
  }
}

inline void Set_all_crystal(void) 
{
  Set_Line_in_Port(LCD_CS1_PIN);
  Set_Line_in_Port(LCD_CS2_PIN);
}


/*--------------------------------------------------------------------------------------------*/
/* Шина данных ЖКИ (PC).                                                                      */
/*--------------------------------------------------------------------------------------------*/
#define   LCD_Data_Bus_to_Output()        DDRA = 0xff
#define   LCD_Data_Bus_To_Input()         { DDRA = 0x00; PORTA = 0xff; }
#define   Put_Data_to_LCD_Data_Bus(data)  PORTA = (data)
#define   Get_Data_from_LCD_Data_Bus()    PINA

/*--------------------------------------------------------------------------------------------*/
/* Размеры поля дисплея в пикселах.                                                           */
/*--------------------------------------------------------------------------------------------*/
#define   MAX_WIDTH     128
#define   MAX_HEIGHT    64

/*--------------------------------------------------------------------------------------------*/
/* Процедура инициализации дисплея.                                                           */
/* Принимает:   ничего не принимает.                                                          */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void Display_Init(void);

/*--------------------------------------------------------------------------------------------*/
/* Процедура ожидания готовности контроллера ЖКИ.                                             */
/* Принимает:   контроллер (0, 1).                                                            */
/* Возвращает:  true, если контроллер готов, false иначе.                                     */
/*--------------------------------------------------------------------------------------------*/
OUT bool Wait_LCD_Ready(IN IDX c);

/*--------------------------------------------------------------------------------------------*/
/* Процедура чтения состояния контроллера ЖКИ.                                                */
/* Принимает:   контроллер (0, 1).                                                            */
/* Возвращает:  считанное состояние.                                                          */
/*--------------------------------------------------------------------------------------------*/
//OUT BYTE Read_Status_from_LCD(IN IDX c);

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи команды в контроллеры ЖКИ.                                                */
/* Принимает:   контроллер (0, 1), код записываемой команды.                                  */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
//void Write_Cmd_to_LCD(IN IDX c, IN BYTE cmd);
void Write_Cmd_to_LCD(IN BYTE cmd);

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды включения (Display_ON).                                 */
/* Принимает:   ничего не принимает.                                                          */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Display_ON()            {Set_crystal(0); Write_Cmd_to_LCD(0x3f);Set_crystal(1); Write_Cmd_to_LCD(0x3f); }

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды выключения (Display_OFF).                               */
/* Принимает:   ничего не принимает.                                                           */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Display_OFF()           { Set_crystal(0);Write_Cmd_to_LCD(0x3e);Set_crystal(1); Write_Cmd_to_LCD(0x3e); }

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды установки номера строки в памяти ЖКИ, отображаемой      */
/* в первой строке экрана (Set_Start_Line).                                                   */
/* Принимает:   контроллер (0, 1), номер строки (0..63).                                      */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Set_Start_Line(line) Write_Cmd_to_LCD(0xc0 + (line))

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды установки адреса страницы (Page_Addr_Set).              */
/* Принимает:   номер страницы (0..7).                                     */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Page_Addr_Set(page)  Write_Cmd_to_LCD(0xb8 + (page))

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда посылки в ЖКИ команды установки адреса столбца (Column_Addr_Set).             */
/* Принимает:   номер столбца (0..63).                                     */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Write_Cmd_Column_Addr_Set(col)    Write_Cmd_to_LCD(0x40 + (col));

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи 1 байта данных в контроллер ЖКИ.                                          */
/* Принимает:   контроллер (0, 1), записываемый байт данных.                                  */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
//void Write_Data_to_LCD(IN IDX c, IN BYTE data);
void Write_Data_to_LCD(IN BYTE data);
void Write_Data_to_LCD( IN BYTE data, IN BYTE n);

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи n байтов данных в контроллер ЖКИ.                                         */
/* Принимает:   контроллер (0, 1), адрес массива выводимых байтов, число выводимых байтов.    */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void Write_Data_to_LCD(IN IDX c, IN BYTE __flash *pData, IN BYTE n);
void Write_Data_to_LCD(IN IDX c, IN BYTE *pData, IN BYTE n);

/*--------------------------------------------------------------------------------------------*/
/* Процедура записи n копий байта данных в контроллер ЖКИ.                                    */
/* Принимает:   контроллер (0, 1), выводимый байт, число его повторений.                      */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
//void Write_Data_to_LCD(IN IDX c, IN BYTE data, IN BYTE n);


/*--------------------------------------------------------------------------------------------*/
/* Процедура очистки ЖКИ.                                                                     */
/* Принимает:   ничего не принимает.                                                          */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
void LCD_Clear(void);

/*--------------------------------------------------------------------------------------------*/
/* Процедура чтения 1 байта данных из контроллера ЖКИ.                                        */
/* Принимает:   контроллер (0, 1).                                                            */
/* Возвращает:  считанный байт.                                                               */
/*--------------------------------------------------------------------------------------------*/
OUT BYTE Read_Data_from_LCD(IN IDX c);

/*--------------------------------------------------------------------------------------------*/
/* Процедура вывода битового образа по заданным координатам.                                  */
/* Принимает:   координаты вывода изображения (графические),                                  */
/*              ширину и высоту изображения,                                                  */
/*              адрес таблицы с битовым образом во flash,                                     */
/*              байт признаков вывода изображения.                                            */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   DRAW_OVER         0
#define   DRAW_XOR          1
#define   DRAW_DIRECT       2

//#define   DRAW_INVERTED       (1 << 2)

//BYTE XOR (BYTE a, BYTE b) ;
inline BYTE XOR (BYTE a, BYTE b) { return (a | b) & (~ (a & b)); }


int Draw_Bitmap(IN BYTE X, IN BYTE Y, IN BYTE W, IN BYTE H, IN BYTE __flash *pData, IN BYTE flags = DRAW_OVER);
inline void Start_Line_increment(IN BYTE offset_step);
int Add_Text(IN char *str, IN struct FONT __flash *font);
void Clr_Lines(IN BYTE y,IN BYTE h);
inline void Set_all_crystal(void) ;
/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда вывода символа заданным шрифтом по заданным координатам.                      */
/* Принимает:   код символа,                                                                  */
/*              координаты вывода символа (графические),                                      */
/*              адрес структуры описания шрифта во flash,                                     */
/*              байт признаков вывода изображения.                                            */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
#define   Draw_Char(ch, X, Y, font, flags)    Draw_Bitmap(X, Y, (font)->Width, (font)->Height, Get_Char_Data_Addr(ch, font), flags)

/*--------------------------------------------------------------------------------------------*/
/* Процедура вывода строки заданным шрифтом по заданным координатам.                          */
/* Принимает:   адрес строки,                                                                 */
/*              координаты вывода символа (графические),                                      */
/*              адрес структуры описания шрифта во flash,                                     */
/*              байт признаков вывода изображения.                                            */
/* Возвращает:  ничего не возвращает.                                                         */
/*--------------------------------------------------------------------------------------------*/
int Draw_Text(IN char *str, IN BYTE X, IN BYTE Y, IN struct FONT __flash *font, IN BYTE flags = DRAW_DIRECT);
int Draw_Text(IN char __flash *str, IN BYTE X, IN BYTE Y, IN struct FONT __flash *font, IN BYTE flags = DRAW_DIRECT);

/*--------------------------------------------------------------------------------------------*/
/* Макрокоманда вычисления начала размещения описания символа в таблице описания символов.    */
/* Принимает:   код символа,                                                                  */
/*              адрес структуры описания шрифта во flash,                                     */
/* Возвращает:  адрес начала описания символа.                                                */
/*--------------------------------------------------------------------------------------------*/
#define   Get_Char_Data_Addr(ch, font)    \
  (font)->pData + (ch) * (font)->Width * ((((font)->Height % 8) != 0) ? (1 + (font)->Height / 8) : ((font)->Height / 8))

/*--------------------------------------------------------------------------------------------*/
/* Структура описания шрифта.                                                                 */
/*--------------------------------------------------------------------------------------------*/
struct  FONT
{
  BYTE  Height;         // Высота символа в пикселах.
  BYTE  Width;          // Ширина символа в пикселах.
  BYTE  Count;          // Число символов в шрифте минус один.
  BYTE __flash *pData;  // Адрес таблицы с описанием символов шрифта.
};

inline BYTE min (BYTE a1, BYTE a2)
{
  if (a1>=a2) return a1;
    else return a2;
}
/*
signed char abs (signed char a1)
{
  if (a1<0) return (a1*(-1));
    else return a1;
}
*/ 
/*--------------------------------------------------------------------------------------------*/
/* Шрифт 6 х 8 пикселов.                                                                      */
/*--------------------------------------------------------------------------------------------*/
extern __flash struct FONT Font_6x8;
extern __flash BYTE Font_6x8_Data[];

/*--------------------------------------------------------------------------------------------*/
/* Шрифт 7 х 10 пикселов тонкий.                                                              */
/*--------------------------------------------------------------------------------------------*/
extern __flash struct FONT Font_7x10_thin;
extern __flash BYTE Font_7x10_thin_Data[];

/*--------------------------------------------------------------------------------------------*/
/* Шрифт 7 х 10 пикселов утолщенный.                                                          */
/*--------------------------------------------------------------------------------------------*/
extern __flash struct FONT Font_7x10_bold;
extern __flash BYTE Font_7x10_bold_Data[];

/*--------------------------------------------------------------------------------------------*/
/* Шрифт 12 х 16 пикселов.                                                                    */
/*--------------------------------------------------------------------------------------------*/
extern __flash struct FONT Font_12x16;
extern __flash BYTE Font_12x16_Data[];
volatile BYTE carrent_offset=0;
volatile BYTE X,Y;

/**********************************************************************************************/
#endif
